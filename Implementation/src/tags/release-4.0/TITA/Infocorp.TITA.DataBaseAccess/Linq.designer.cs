#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infocorp.TITA.DataBaseAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="baseLocal")]
	public partial class LinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCurrent(Current instance);
    partial void UpdateCurrent(Current instance);
    partial void DeleteCurrent(Current instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    #endregion
		
		public LinqDataContext() : 
				base(global::Infocorp.TITA.DataBaseAccess.Properties.Settings.Default.baseLocalConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Current> Currents
		{
			get
			{
				return this.GetTable<Current>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contracts
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
	}
	
	[Table(Name="dbo.[Current]")]
	public partial class Current : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _site;
		
		private string _current_user;
		
		private string _logged_date;
		
		private string _last_modification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsiteChanging(string value);
    partial void OnsiteChanged();
    partial void Oncurrent_userChanging(string value);
    partial void Oncurrent_userChanged();
    partial void Onlogged_dateChanging(string value);
    partial void Onlogged_dateChanged();
    partial void Onlast_modificationChanging(string value);
    partial void Onlast_modificationChanged();
    #endregion
		
		public Current()
		{
			OnCreated();
		}
		
		[Column(Storage="_site", DbType="NChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string site
		{
			get
			{
				return this._site;
			}
			set
			{
				if ((this._site != value))
				{
					this.OnsiteChanging(value);
					this.SendPropertyChanging();
					this._site = value;
					this.SendPropertyChanged("site");
					this.OnsiteChanged();
				}
			}
		}
		
		[Column(Name="[current_user]", Storage="_current_user", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string current_user
		{
			get
			{
				return this._current_user;
			}
			set
			{
				if ((this._current_user != value))
				{
					this.Oncurrent_userChanging(value);
					this.SendPropertyChanging();
					this._current_user = value;
					this.SendPropertyChanged("current_user");
					this.Oncurrent_userChanged();
				}
			}
		}
		
		[Column(Storage="_logged_date", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string logged_date
		{
			get
			{
				return this._logged_date;
			}
			set
			{
				if ((this._logged_date != value))
				{
					this.Onlogged_dateChanging(value);
					this.SendPropertyChanging();
					this._logged_date = value;
					this.SendPropertyChanged("logged_date");
					this.Onlogged_dateChanged();
				}
			}
		}
		
		[Column(Storage="_last_modification", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string last_modification
		{
			get
			{
				return this._last_modification;
			}
			set
			{
				if ((this._last_modification != value))
				{
					this.Onlast_modificationChanging(value);
					this.SendPropertyChanging();
					this._last_modification = value;
					this.SendPropertyChanged("last_modification");
					this.Onlast_modificationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Contracts")]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_contract;
		
		private string _site;
		
		private string _issues_list;
		
		private string _workpackage_list;
		
		private string _task_list;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_contractChanging(int value);
    partial void Onid_contractChanged();
    partial void OnsiteChanging(string value);
    partial void OnsiteChanged();
    partial void Onissues_listChanging(string value);
    partial void Onissues_listChanged();
    partial void Onworkpackage_listChanging(string value);
    partial void Onworkpackage_listChanged();
    partial void Ontask_listChanging(string value);
    partial void Ontask_listChanged();
    #endregion
		
		public Contract()
		{
			OnCreated();
		}
		
		[Column(Storage="_id_contract", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_contract
		{
			get
			{
				return this._id_contract;
			}
			set
			{
				if ((this._id_contract != value))
				{
					this.Onid_contractChanging(value);
					this.SendPropertyChanging();
					this._id_contract = value;
					this.SendPropertyChanged("id_contract");
					this.Onid_contractChanged();
				}
			}
		}
		
		[Column(Storage="_site", DbType="NChar(40)")]
		public string site
		{
			get
			{
				return this._site;
			}
			set
			{
				if ((this._site != value))
				{
					this.OnsiteChanging(value);
					this.SendPropertyChanging();
					this._site = value;
					this.SendPropertyChanged("site");
					this.OnsiteChanged();
				}
			}
		}
		
		[Column(Storage="_issues_list", DbType="NChar(40)")]
		public string issues_list
		{
			get
			{
				return this._issues_list;
			}
			set
			{
				if ((this._issues_list != value))
				{
					this.Onissues_listChanging(value);
					this.SendPropertyChanging();
					this._issues_list = value;
					this.SendPropertyChanged("issues_list");
					this.Onissues_listChanged();
				}
			}
		}
		
		[Column(Storage="_workpackage_list", DbType="NChar(40)")]
		public string workpackage_list
		{
			get
			{
				return this._workpackage_list;
			}
			set
			{
				if ((this._workpackage_list != value))
				{
					this.Onworkpackage_listChanging(value);
					this.SendPropertyChanging();
					this._workpackage_list = value;
					this.SendPropertyChanged("workpackage_list");
					this.Onworkpackage_listChanged();
				}
			}
		}
		
		[Column(Storage="_task_list", DbType="NChar(40)")]
		public string task_list
		{
			get
			{
				return this._task_list;
			}
			set
			{
				if ((this._task_list != value))
				{
					this.Ontask_listChanging(value);
					this.SendPropertyChanging();
					this._task_list = value;
					this.SendPropertyChanged("task_list");
					this.Ontask_listChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
